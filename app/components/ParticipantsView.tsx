"use client";

import { useState } from "react";

import { Player } from "@/app/models/Player";

import { TournamentTeamsTable } from "@/app/components/TournamentTeamsTable";
import { TournamentParticipantsView } from "@/app/components/TournamentParticipantsView";

import "@/app/components/ParticipantsView.css";

// üëâ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–µ–π—Å—Ç–≤–∏—è –±–µ—Ä—ë–º –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
import { useTournament } from "@/app/tournaments/[id]/TournamentProvider";

export function ParticipantsView() {
  const {
    loading,
    tournament,
    players,
    participants,
    teams,
    // –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    addPlayerToTournament,
    removeParticipant,
    addTeamToTournament,
    removeTeam,
    createTeam,
  } = useTournament();

  console.log("ParticipantsView::players", players);
  console.log("ParticipantsView::participants", participants);
  console.log("ParticipantsView::teams", teams);

  // –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã
  const [selectedPlayers, setSelectedPlayers] = useState<Player[]>([]);

  // –≤–∫–ª–∞–¥–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
  const [activeTab, setActiveTab] = useState<"teams" | "parts">("parts");

  if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (!tournament) return <p>–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</p>;

  // –æ–¥–∏–Ω–æ—á–∫–∏: —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (–Ω–µ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö)
  const participantIds = new Set(
    participants.map((p) => p.player?.id).filter(Boolean) as number[]
  );
  const availablePlayers = players.filter((p) => !participantIds.has(p.id));

  // –ø–∞—Ä—ã: —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–µ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö)
  const participantTeamIds = new Set(
    participants.map((p) => p.team?.id).filter(Boolean) as number[]
  );
  const availableTeams = teams.filter((t) => !participantTeamIds.has(t.id));

  // –∫–æ–º–∞–Ω–¥—ã, —É–∂–µ —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ (–¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ / –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  const tournamentTeams = participants
    .filter((p) => p.team)
    .map((p) => p.team!)
    // –Ω–∞ —Å–ª—É—á–∞–π –¥—É–±–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –∫–æ–º–∞–Ω–¥—ã:
    .filter((team, idx, arr) => arr.findIndex(t => t.id === team.id) === idx);

  // —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤
  async function handleCreateTeam() {
    if (selectedPlayers.length !== 2) return;
    const [p1, p2] = selectedPlayers;
    await createTeam?.(`${p1.name} - ${p2.name}`, p1.id, p2.id);
    setSelectedPlayers([]); // –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞
  }

  return (
    <div className="history-wrap">
      {/* –û–¥–∏–Ω–æ—á–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã */}
      {tournament.tournament_type === "single" ? (
        <TournamentParticipantsView
          availablePlayers={availablePlayers}
          availableTeams={[]}
          tournamentParticipants={participants}
          onAddPlayerToTournament={(id) => addPlayerToTournament?.(id)}
          onAddTeamToTournament={(id) => addTeamToTournament?.(id)}
          onRemoveParticipantFromTournament={(id) => removeParticipant?.(id)}
        />
      ) : (
        <>
          <div className="card card-tabs">
            <button
              className={
                activeTab === "parts"
                  ? "card-btn tabs-button card-btn-act"
                  : "card-btn tabs-button"
              }
              onClick={() => setActiveTab("parts")}
            >
              –£—á–∞—Å—Ç–Ω–∏–∫–∏
            </button>
            <button
              className={
                activeTab === "teams"
                  ? "card-btn tabs-button card-btn-act"
                  : "card-btn tabs-button"
              }
              onClick={() => setActiveTab("teams")}
            >
              –ö–æ–º–∞–Ω–¥—ã
            </button>
          </div>

          <div>
            {/* TAB: —Å–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ */}
            {activeTab === "teams" && (
              <TournamentTeamsTable
                availablePlayers={availablePlayers}
                selectedPlayers={selectedPlayers}
                onTogglePlayer={(p) => {
                  setSelectedPlayers((prev) => {
                    const isSel = prev.some((sp) => sp.id === p.id);
                    if (isSel) return prev.filter((sp) => sp.id !== p.id);
                    return prev.length < 2 ? [...prev, p] : prev;
                  });
                }}
                onCreateTeam={handleCreateTeam}
                // ‚¨á –µ—Å–ª–∏ —É —Ç–µ–±—è –≤ TeamsTable –ø—Ä–æ–ø –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–Ω–∞—á–µ ‚Äî —Å–º–µ–Ω–∏ –∑–¥–µ—Å—å –Ω–∞ —Å–≤–æ–π
                allTeams={availableTeams}
                onRemoveTeamFromTournament={(teamId: number) => {
                  // —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É –∏–∑ –ë–î (–∫–∞–∫ –±—ã–ª–æ —É —Ç–µ–±—è)
                  removeTeam?.(teamId);
                }}
              />
            )}

            {/* TAB: —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–ø–∞—Ä—ã —É–∂–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ + –¥–æ–±–∞–≤–∏—Ç—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö) */}
            {activeTab === "parts" && (
              <TournamentParticipantsView
                availablePlayers={[]}
                availableTeams={availableTeams}
                tournamentParticipants={participants}
                onAddPlayerToTournament={(id) => addPlayerToTournament?.(id)}
                onAddTeamToTournament={(id) => addTeamToTournament?.(id)}
                onRemoveParticipantFromTournament={(id) => removeParticipant?.(id)}
              />
            )}
          </div>
        </>
      )}
    </div>
  );
}