// app/clubs/[slug]/ClubProvider.tsx
"use client";

import React, {
  createContext,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";

import { Club as ClubModel } from "@/app/models/Club";
import type { Club } from "@/app/models/Club";
import type { ClubPlain } from "@/app/models/Club";

import { ClubsRepository } from "@/app/repositories/ClubsRepository";
import { PlayersRepository } from "@/app/repositories/PlayersRepository";
import { UsersRepository } from "@/app/repositories/UsersRepository"; // üëà
import { MatchRepository } from "@/app/repositories/MatchRepository";

import { Player } from "@/app/models/Player";
import { useUser } from "@/app/components/UserContext";
import type { User } from "@/app/models/Users"; // üëà
import type { Match } from "@/app/models/Match";

/** –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞/—Ä–æ—É—Ç–µ—Ä–∞ */
type InitialData = {
  slug: string;                 // —Ä–æ—É—Ç–∏–º –ø–æ slug
  clubPlain?: ClubPlain | null; // POJO –∫–ª—É–±–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
};

/** –ü—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–ª—É–±–∞ */
export type ClubContextShape = {
  // meta
  loading: boolean;
  initialLoading: boolean;
  refreshing: boolean;
  mutating: boolean;

  clubId: number | null;
  slug: string;

  // –¥–∞–Ω–Ω—ã–µ
  club: Club | null;
  director: User | null;        // üëà –¥–æ–±–∞–≤–∏–ª–∏
  members: Player[];
  players: Player[];
  matches: Match[];

  // –¥–µ–π—Å—Ç–≤–∏—è
  reload: (opts?: { silent?: boolean }) => Promise<void>;
  addMember: (playerId: number) => Promise<void>;
  removeMember: (playerId: number) => Promise<void>;
};

const ClubContext = createContext<ClubContextShape | null>(null);

/** –õ–æ–∫–∞–ª—å–Ω—ã–π helper: —Å–æ–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ plain-–æ–±—ä–µ–∫—Ç–∞ */
function toModelFromPlain(plain: ClubPlain | null | undefined): Club | null {
  if (!plain) return null;
  return new ClubModel({
    id: plain.id,
    director_id: plain.director_id,
    slug: plain.slug,
    name: plain.name,
    description: plain.description ?? null,
    city: plain.city ?? null,
    logo_url: plain.logo_url ?? null,
    members_count: plain.members_count ?? null,
    tournaments_count: plain.tournaments_count ?? null,
    created_at: plain.created_at,
    updated_at: plain.updated_at,
  });
}

export function ClubProvider({
  initial,
  children,
}: {
  initial: InitialData;
  children: React.ReactNode;
}) {
  const { loading: userLoading } = useUser();
  const { slug, clubPlain } = initial;

  // state
  const [club, setClub] = useState<Club | null>(toModelFromPlain(clubPlain));
  const clubId = club?.id ?? null;

  const [director, setDirector] = useState<User | null>(null); // üëà
  const [members, setMembers] = useState<Player[]>([]);
  const [players, setPlayers] = useState<Player[]>([]);
  const [matches, setMatches] = useState<Match[]>([]);

  const needInitialFetch = true; // !clubPlain;

  // —Ñ–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  const [initialLoading, setInitialLoading] = useState<boolean>(needInitialFetch);
  const [refreshing, setRefreshing] = useState<boolean>(false);
  const [mutating, setMutating] = useState<boolean>(false);

  /** –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ slug: —Ç—è–Ω–µ–º club + –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ + —á–ª–µ–Ω–æ–≤ –∫–ª—É–±–∞ + –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ */
  const reload = useCallback(
    async (opts?: { silent?: boolean }) => {
      const silent = !!opts?.silent;
      silent ? setRefreshing(true) : setInitialLoading(true);
      try {
        // 1) —Å–∞–º –∫–ª—É–±
        const plain = await ClubsRepository.getBySlug(slug); // –æ–∂–∏–¥–∞–µ—Ç—Å—è ClubPlain | null
        const next = toModelFromPlain(plain);
        setClub(next);

        // 2) –¥–∏—Ä–µ–∫—Ç–æ—Ä
        if (next?.created_by) {
          try {
            const d = await UsersRepository.findById(next.created_by); // -> User | null
            setDirector(d ?? null);
          } catch (err) {
            console.error("ClubProvider.reload: cannot load director", err);
            setDirector(null);
          }
        } else {
          setDirector(null);
        }

        // 3) —á–ª–µ–Ω—ã –∫–ª—É–±–∞ + –∫–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä–æ–∫–æ–≤
        if (next?.id) {
          const [membersNext, allPlayers, clubMatches] = await Promise.all([
            ClubsRepository.loadMembers(next.id), // -> Player[]
            PlayersRepository.loadAll(),          // -> Player[]
            MatchRepository.loadMatchesForClub(next.id),
          ]);

          setMembers(membersNext ?? []);
          setPlayers(allPlayers ?? []);
          setMatches(clubMatches ?? []);
        } else {
          setMembers([]);
          setPlayers([]);
          setMatches([]);
        }
      } finally {
        silent ? setRefreshing(false) : setInitialLoading(false);
      }
    },
    [slug]
  );

  // –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –µ—Å–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –ø—Ä–∏—à—ë–ª clubPlain
  const initialFetchRef = useRef(false);

  useEffect(() => {
    if (initialFetchRef.current) return;
    if (needInitialFetch && !userLoading) {
      initialFetchRef.current = true;
      void reload();
    }
  }, [needInitialFetch, userLoading, reload]);

  /** –î–æ–±–∞–≤–∏—Ç—å —á–ª–µ–Ω–∞ –∫–ª—É–±–∞ */
  const addMember = useCallback(
    async (playerId: number) => {
      if (!clubId) {
        await reload({ silent: true });
      }
      if (!clubId && !club?.id) throw new Error("–ö–ª—É–± –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
      setMutating(true);
      try {
        await ClubsRepository.addMember(club?.id ?? clubId!, playerId);
        await reload({ silent: true });
      } finally {
        setMutating(false);
      }
    },
    [clubId, club?.id, reload]
  );

  /** –£–¥–∞–ª–∏—Ç—å —á–ª–µ–Ω–∞ –∫–ª—É–±–∞ */
  const removeMember = useCallback(
    async (playerId: number) => {
      if (!clubId) {
        await reload({ silent: true });
      }
      if (!clubId && !club?.id) throw new Error("–ö–ª—É–± –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
      setMutating(true);
      try {
        await ClubsRepository.removeMember(club?.id ?? clubId!, playerId);
        await reload({ silent: true });
      } finally {
        setMutating(false);
      }
    },
    [clubId, club?.id, reload]
  );

  const value = useMemo<ClubContextShape>(
    () => ({
      loading: initialLoading,
      initialLoading,
      refreshing,
      mutating,

      clubId,
      slug,

      club,
      director,     // üëà –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
      members,
      players,
      matches,

      reload,
      addMember,
      removeMember,
    }),
    [
      initialLoading,
      refreshing,
      mutating,
      clubId,
      slug,
      club,
      director,     // üëà –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
      members,
      players,
      matches,
      reload,
      addMember,
      removeMember,
    ]
  );

  return <ClubContext.Provider value={value}>{children}</ClubContext.Provider>;
}

// ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –≤–µ—Ä–Ω—ë—Ç null –≤–º–µ—Å—Ç–æ throw, –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ—Ç
export function useOptionalClub() {
  return useContext(ClubContext) ?? null;
}

export function useClub(): ClubContextShape {
  const ctx = useContext(ClubContext);
  if (!ctx) throw new Error("useClub must be used within ClubProvider");
  return ctx;
}
