"use client";

import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import { TournamentsRepository } from "../../repositories/TournamentsRepository";
import { PlayersRepository } from "../../repositories/PlayersRepository";
import { TeamsRepository } from "../../repositories/TeamsRepository";
import { MatchRepository } from "../../repositories/MatchRepository";
import { Tournament } from "@/app/models/Tournament";
import { Player } from "@/app/models/Player";
import { Match } from "@/app/models/Match";
import { Participant } from "@/app/models/Participant";
import { PyramidView } from "./PyramidView";
import { MatchHistoryModal } from "./MatchHistoryModal";

import "./Page.css";


export default function TournamentPage() {
  const params = useParams<{ id: string }>();
  const tournamentId = parseInt(params?.id ?? "", 10);

  const [tournament, setTournament] = useState<Tournament | null>(null);
  const [participants, setParticipants] = useState<Participant[]>([]);
  const [matches, setMatches] = useState<Match[]>([]);
  const [allPlayers, setAllPlayers] = useState<Player[]>([]);
  const [allTeams, setAllTeams] = useState<{ id: number; name: string }[]>([]);
  const [selectedIds, setSelectedIds] = useState<number[]>([]);
  const [matchDate, setMatchDate] = useState<string>("");
  const [participant1Id, setParticipant1Id] = useState<number | null>(null);
  const [participant2Id, setParticipant2Id] = useState<number | null>(null);
  const [matchScore, setMatchScore] = useState<string>("");
  const [selectedLevel, setSelectedLevel] = useState<number>(15); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ 15 —É—Ä–æ–≤–µ–Ω—å
  const [historyOpen, setHistoryOpen] = useState(false);
  const [historyPlayerId, setHistoryPlayerId] = useState<number | null>(null);
  const [editingMatch, setEditingMatch] = useState<Match | null>(null);

  useEffect(() => {
    async function load() {
      
      if (!tournamentId) {
        console.log("Tournament id: ", tournamentId)
        return; // null –∏–ª–∏ NaN ‚Äî –Ω–µ –≥—Ä—É–∑–∏–º
      }

      const allT = await TournamentsRepository.loadAll();
      const t = allT.find((x) => x.id === tournamentId);
      setTournament(t || null);

      const parts = await TournamentsRepository.loadParticipants(tournamentId);
      setParticipants(parts);

      const m = await MatchRepository.loadMatches(tournamentId);
      setMatches(m);

      if (t?.tournament_type === "single") {
        setAllPlayers(await PlayersRepository.loadAll());
      } else {
        setAllTeams(await TeamsRepository.loadAll());
      }
    }
    load();
  }, [tournamentId]);

  const toggleSelected = (id: number) => {
    setSelectedIds((prev) =>
      prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]
    );
  };

  const addParticipants = async () => {
    if (!selectedIds.length || !tournament) return;

    for (const id of selectedIds) {
      if (tournament.tournament_type === "single") {
        await TournamentsRepository.addPlayer(tournamentId, id, selectedLevel);
      } else {
        await TournamentsRepository.addTeam(tournamentId, id, selectedLevel);
      }
    }

    const parts = await TournamentsRepository.loadParticipants(tournamentId);
    setParticipants(parts);
    setSelectedIds([]);
  };

  const removeParticipant = async (id: number) => {
    await TournamentsRepository.removeParticipant(id);
    const parts = await TournamentsRepository.loadParticipants(tournamentId);
    setParticipants(parts);
  };

  const handleEditMatchSave = async (updatedMatch: Match) => {
    try {
      await MatchRepository.updateMatch(updatedMatch);
      const m = await MatchRepository.loadMatches(tournamentId);
      setMatches(m);
      setEditingMatch(null);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç—á");
    }
  };

  const handleDeleteMatch = async (matchId: number) => {
    try {
      await MatchRepository.deleteMatch(matchId);
      const m = await MatchRepository.loadMatches(tournamentId);
      setMatches(m);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Ç—á");
    }
  };

  const handleAddMatch = async () => {
    if (!participant1Id || !participant2Id || !matchDate || !tournament) {
      alert("–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è");
      return;
    }

    try {
      // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É "6-4, 4-6, 10-8" ‚Üí [[6,4],[4,6],[10,8]]
      const scores = matchScore
        .split(",")
        .map((set) => set.trim().split("-").map(Number)) as [number, number][];

      // –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä ‚Üí –ø–æ 1 id –≤ –∫–∞–∂–¥–æ–π "–∫–æ–º–∞–Ω–¥–µ"
      const team1 = [participant1Id];
      const team2 = [participant2Id];

      await MatchRepository.saveMatch(
        new Date(matchDate),
        tournament.tournament_type,
        scores,
        team1,
        team2,
        tournament.id
      );

      // –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
      setMatchDate("");
      setMatchScore("");
      setParticipant1Id(null);
      setParticipant2Id(null);

      // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
      const m = await MatchRepository.loadMatches(tournamentId);
      setMatches(m);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç—á");
    }
  };

  if (!tournament) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;

  // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–∏–≥—Ä–æ–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã)
  const allItems = tournament.tournament_type === "single" ? allPlayers : allTeams;

  // –°–ø–∏—Å–æ–∫ id —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const existingIds = participants.map((p) => p.player?.id ?? p.team);

  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ–≥–æ –µ—â—ë –Ω–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ
  const availableItems = allItems.filter((item) => !existingIds.includes(item.id));

  return (
    <div className="container">
      <h1>–¢—É—Ä–Ω–∏—Ä: {tournament.name}</h1>

      <div className="tournament-card">
        <div className="tournament-header">
          <h3>{tournament.name}</h3>
          <span className={`status ${tournament.status}`}>
            {tournament.status === "draft"
              ? "–ß–µ—Ä–Ω–æ–≤–∏–∫"
              : tournament.status === "ongoing"
              ? "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
              : "–ó–∞–≤–µ—Ä—à–µ–Ω"}
          </span>
        </div>

        <div className="tournament-details">
          <p>
            üèÜ –¢–∏–ø:{" "}
            {tournament.tournament_type === "single" ? "–û–¥–∏–Ω–æ—á–Ω—ã–π" : "–ü–∞—Ä–Ω—ã–π"}
          </p>
          <p>
            üìÖ {tournament.start_date} ‚Üí {tournament.end_date || "?"}
          </p>
        </div>
      </div>

      <h2>–£—á–∞—Å—Ç–Ω–∏–∫–∏</h2>
      <PyramidView
        participants={participants}
        selectedId={participant1Id}
        onSelect={setParticipant1Id}
        onShowHistory={(id) => {
          if (id !== undefined) {
            setHistoryPlayerId(id);
            setHistoryOpen(true);
          }
        }}
        matches={matches}
      />

      {/* –í—Å—Ç–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª–∫—É */}
      <MatchHistoryModal
        isOpen={historyOpen}
        onClose={() => setHistoryOpen(false)}
        matches={matches}
        playerId={historyPlayerId}
        onEditMatch={(m) => handleEditMatchSave(m)}        // ‚úÖ –ø–µ—Ä–µ–¥–∞–ª–∏
        onDeleteMatch={handleDeleteMatch}             // ‚úÖ –ø–µ—Ä–µ–¥–∞–ª–∏
      />

      <div className="add-participant">
        <h3>–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h3>

        <div className="checkbox-list">
          {availableItems.map((item) => (
            <div
              key={item.id}
              className={`checkbox-item ${selectedIds.includes(item.id) ? "selected" : ""}`}
              onClick={() => toggleSelected(item.id)}
            >
              <div>
                <input
                  type="checkbox"
                  checked={selectedIds.includes(item.id)}
                  onChange={() => toggleSelected(item.id)}
                  onClick={(e) => e.stopPropagation()}
                />
              </div>
              <div className="player-name">{item.name}</div>
            </div>
          ))}
        </div>

        <div className="add-controls">
          <label>
            –£—Ä–æ–≤–µ–Ω—å:{" "}
            <select
              value={selectedLevel}
              onChange={(e) => setSelectedLevel(Number(e.target.value))}
            >
              {Array.from({ length: 15 }, (_, i) => (
                <option key={i + 1} value={i + 1}>
                  {i + 1}
                </option>
              ))}
            </select>
          </label>

          <button onClick={addParticipants} disabled={selectedIds.length === 0}>
            –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
          </button>
        </div>
      </div>

      <h2>–ú–∞—Ç—á–∏</h2>
      {matches.length === 0 ? (
        <p>–ú–∞—Ç—á–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
      ) : (
        <table className="matches-table">
          <thead>
            <tr>
              <th>–î–∞—Ç–∞</th>
              <th>–ò–≥—Ä–æ–∫ 1</th>
              <th>–ò–≥—Ä–æ–∫ 2</th>
              <th>–°—á—ë—Ç</th>
            </tr>
          </thead>
          <tbody>
            {matches.map((m) => (
              <tr key={m.id}>
                <td>{m.date.toDateString()}</td>
                <td>{m.player1?.name || m.team1?.teamName || "??"}</td>
                <td>{m.player2?.name || m.team2?.teamName || "??"}</td>
                <td>{m.scores || "-"}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}

      <h3>–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç—á</h3>
      <div className="add-match-form">
        <label>
          –î–∞—Ç–∞:
          <input
            type="date"
            value={matchDate}
            onChange={(e) => setMatchDate(e.target.value)}
          />
        </label>

        <label>
          –£—á–∞—Å—Ç–Ω–∏–∫ 1:
          <select onChange={(e) => setParticipant1Id(Number(e.target.value))} value={participant1Id || ""}>
            <option value="">-- –í—ã–±–µ—Ä–∏ --</option>
            {allItems.map((item) => (
              <option key={item.id} value={item.id}>
                {item.name}
              </option>
            ))}
          </select>
        </label>

        <label>
          –£—á–∞—Å—Ç–Ω–∏–∫ 2:
          <select onChange={(e) => setParticipant2Id(Number(e.target.value))} value={participant2Id || ""}>
            <option value="">-- –í—ã–±–µ—Ä–∏ --</option>
            {allItems.map((item) => (
              <option key={item.id} value={item.id}>
                {item.name}
              </option>
            ))}
          </select>
        </label>

        <label>
          –°—á—ë—Ç:
          <input
            type="text"
            placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 6-4, 4-6, 10-8"
            value={matchScore}
            onChange={(e) => setMatchScore(e.target.value)}
          />
        </label>

        <button onClick={handleAddMatch}>–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç—á</button>
      </div>
    </div>
  );
}